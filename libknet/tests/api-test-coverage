#!/bin/sh
#
# Copyright (C) 2016-2025 Red Hat, Inc.  All rights reserved.
#
# Author: Fabio M. Di Nitto <fabbione@kronosnet.org>
#
# This software licensed under GPL-2.0+
#

srcdir="$1"/libknet/tests
builddir="$2"/libknet/tests

headerapicalls="$(grep knet_ "$srcdir"/../libknet.h | grep -v "^ \*" | grep -v ^struct | grep -v "^[[:space:]]" | grep -v typedef | sed -e 's/(.*//g' -e 's/^const //g' -e 's/\*//g' | awk '{print $2}')"

# The PowerPC64 ELFv1 ABI defines the address of a function as that of a
# function descriptor defined in .opd, a data (D) section.  Other ABIs
# use the entry address of the function itself in the text (T) section.
# Filter additional symbols exported by ln(1) on Solaris.
exportedapicalls="$(nm -B -D "$builddir"/../.libs/libknet.so | grep ' [DT] ' | awk '{if ($3 != "_edata" && $3 != "_GLOBAL_OFFSET_TABLE_" && $3 != "_PROCEDURE_LINKAGE_TABLE_") {print $3}}' | sed -e 's#@@LIBKNET##g')"

echo "Checking for exported symbols NOT available in header file"

for i in $exportedapicalls; do
	found=0
	for x in $headerapicalls; do
		if [ "$x" = "$i" ]; then
			found=1
			break;
		fi
	done
	if [ "$found" = 0 ]; then
		echo "Symbol $i not found in header file"
		exit 1
	fi
done

echo "Checking for symbols in header file NOT exported by binary lib"

for i in $headerapicalls; do
	found=0
	for x in $exportedapicalls; do
		if [ "$x" = "$i" ]; then
			found=1
			break;
		fi
	done
	if [ "$found" = 0 ]; then
		echo "Symbol $i not found in binary lib"
		exit 1
	fi
done

echo "Checking for tests with memcheck exceptions"

for i in $(grep -l is_memcheck "$srcdir"/*.c | grep -v test-common); do
	echo "WARNING: $(basename $i) - has memcheck exception enabled"
done

echo "Checking for tests with helgrind exceptions"

for i in $(grep -l is_helgrind "$srcdir"/*.c | grep -v test-common); do
	echo "WARNING: $(basename $i) has helgrind exception enabled"
done

echo "Checking for api test coverage"

numapicalls=0
found=0
missing=0

for i in $headerapicalls; do
	numapicalls=$((numapicalls + 1))
	if [ -f $srcdir/api_${i}.c ]; then
		found=$((found + 1))
	else
		missing=$((missing + 1))
		echo "MISSING: $i"
	fi
done

# Check Rust bindings coverage
rust_found=0
rust_missing=0
# These are implemented directly in the Rust code
deliberately_missing="knet_strtoaddr knet_addrtostr knet_get_transport_name_by_id knet_get_transport_id_by_name"
rustapicalls=$numapicalls
for i in $headerapicalls; do
    rustcall=`echo $i|awk '{print substr($0, 6)}'`
    grep "^pub fn ${rustcall}(" $1/libknet/bindings/rust/src/knet_bindings.rs > /dev/null 2>/dev/null
    if [ $? = 0 ]
    then
	rust_found=$((rust_found+1))
    else
	echo $deliberately_missing | grep $i 2>/dev/null >/dev/null
	if [ $? != 0 ]
	then
	    echo "$i Missing from Rust API"
	    rust_missing=$((rust_missing+1))
	else
	    rustapicalls=$((rustapicalls-1))
	fi
    fi
done



# Check Rust test coverage
rust_test_found=0
rust_test_missing=0
deliberately_missing="knet_strtoaddr knet_addrtostr knet_get_transport_name_by_id knet_get_transport_id_by_name"
rust_testapicalls=$numapicalls
for i in $headerapicalls; do
    rustcall=`echo $i|awk '{print substr($0, 6)}'`
    grep "knet::${rustcall}(" $1/libknet/bindings/rust/tests/src/bin/knet-test.rs > /dev/null 2>/dev/null
    if [ $? = 0 ]
    then
	rust_test_found=$((rust_test_found+1))
    else
	echo $deliberately_missing | grep $i 2>/dev/null >/dev/null
	if [ $? != 0 ]
	then
	    echo "$i Missing from Rust test"
	    rust_test_missing=$((rust_test_missing+1))
	else
	    rust_testapicalls=$((rust_testapicalls-1))
	fi
    fi
done


echo ""
echo "Summary"
echo "-------"
echo "Found   : $found"
echo "Missing : $missing"
echo "Total   : $numapicalls"
which bc > /dev/null 2>&1 && {
	coverage=$(echo "scale=3; $found / $numapicalls * 100" | bc -l)
	echo "Coverage: $coverage%"
}

echo
echo "Rust API Summary"
echo "----------------"
echo "Found   : $rust_found"
echo "Missing : $rust_missing"
echo "Total   : $rustapicalls"
which bc > /dev/null 2>&1 && {
	coverage=$(echo "scale=3; $rust_found / $rustapicalls * 100" | bc -l)
	echo "Coverage: $coverage%"
}


echo
echo "Rust test Summary"
echo "-----------------"
echo "Found   : $rust_test_found"
echo "Missing : $rust_test_missing"
echo "Total   : $rustapicalls"
which bc > /dev/null 2>&1 && {
	coverage=$(echo "scale=3; $rust_test_found / $rust_testapicalls * 100" | bc -l)
	echo "Coverage: $coverage%"
}

exit 0
